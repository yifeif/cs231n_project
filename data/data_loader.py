"""Utilities for loading ShapeNet screenshot data."""
import argparse
import logging
import numpy as np
import os
from scipy.misc import imread


_SEED = 231


def get_model_paths(model_paths_file):
  """Reads model paths from file.

  Args:
    model_paths_file: path to either train_data.txt, train_data.txt or
      val_data.txt generated by split_data.py.

  Returns:
    List of string model paths (relative to screenshots directory).
  """
  with open(model_paths_file, 'r') as f:
    return f.read().split('\n')


def read_image_data(
    screenshot_dir, model_paths, orientations_per_model, shuffle=True):
  """Reads train, validation and test data and creates numpy arrays.

  Args:
    screenshot_dir: Path to the screesnshot directory with ShapeNet data
      screenshots created using shapenet-viewer.
    model_paths: Paths relative to screenshot_dir to load data from.
    orientations_per_model: (integer) How many images we have for each model.
    shuffle: Whether to shuffle data after reading it.

  Returns:
    A tuple of:
    - X: (N, 256, 256, 1) array of input images (edges).
    - Y: (N, 256, 256, 3) array of output images.
    - orientation (N) array of orientations for inputs.
  """
  N = len(model_paths)*orientations_per_model
  X = np.zeros((N, 256, 256, 1), dtype=np.float32)
  Y = np.zeros((N, 256, 256, 3), dtype=np.float32)
  orientations = np.zeros((N,), dtype=np.int32)

  for model_index, path_suffix in enumerate(model_paths):
    # Full path to the model directory
    full_model_path = os.path.join(screenshot_dir, path_suffix)
    model_name = os.path.basename(path_suffix)
    # Index of the first entry in X for this model.
    model_start_index = orientations_per_model*model_index

    # Add all images for this model to X and Y.
    for orientation in range(orientations_per_model):
      edges_file_name = '%s-%d_padded.npy' % (model_name, orientation)
      image_file_name = '%s-%d_padded.png' % (screenshot_dir, orientation)
      # Loaded image is in HWC format.
      edges = np.load(
          os.path.join(full_model_path, edges_file_name)).astype(np.float32)
      img = imread(os.path.join(full_model_path, image_file_name))
      X[model_start_index+orientation] = edges
      Y[model_start_index+orientation] = img
      orientations[model_start_index+orientation] = orientation

  if shuffle:
    shuffled_indexes = range(N).shuffle()
    return (X[shuffled_indexes], Y[shuffled_indexes],
            orientations[shuffled_indexes])
  return X, Y, orientations


def load_ShapeNet_screenshot_data(
    screenshots_dir, data_split_dir, orientations_per_model=10, shuffle=True):
  """Loads ShapeNet screenshots data.

  Args:
    screenshots_dir: directory to ShapeNet screenshots data generated by
      shapenet-viewer (https://github.com/ShapeNet/shapenet-viewer).
    data_split_dir: directory containing train_data.txt, val_data.txt
      and test_data.txt. Each of these files must contain a list of paths
      relative to screenshots_dir for the models that we want to load
      either for training, validation or testing.
    orientations_per_model: (integer) How many images we have for each model.
    shuffle: whether to shuffle data after reading it.

  Returns:
    A tuple of:
    - X_train: (N_tr, 256, 256, 1) array of training input images (edges).
    - Y_train: (N_tr, 256, 256, 3) array of training output images.
    - orientation_train (N_tr) array of orientations for training inputs.
    - X_val: (N_val, 256, 256, 1) array of validation input images (edges).
    - y_val: (N_val, 256, 256, 3) array of validation output images.
    - orientation_val (N_val) array of orientations for validation inputs.
    - X_test: (N_test, 256, 256, 1) array of testing input images (edges).
    - y_test: (N_test, 256, 256, 3) array of test output images.
    - orientation_test (N_test) array of orientations for test inputs.
  """
  train_models_path = os.path.join(data_split_dir, 'train_data.txt')
  if not os.path.isfile(train_models_path):
    logging.error('%s does not have train_data.txt file', screenshots_dir)
    return False
  val_models_path = os.path.join(data_split_dir, 'val_data.txt')
  if not os.path.isfile(val_models_path):
    logging.error('%s does not have val_data.txt file', screenshots_dir)
    return False
  test_models_path = os.path.join(data_split_dir, 'test_data.txt')
  if not os.path.isfile(test_models_path):
    logging.error('%s does not have test_data.txt file', screenshots_dir)
    return False
  train_paths = get_model_paths(train_models_path, shuffle)
  val_paths = get_model_paths(val_models_path, shuffle)
  test_paths = get_model_paths(test_models_path, shuffle)

  logging.info('Loading training data...')
  X_train, Y_train, orientation_train = read_image_data(
      screenshots_dir, train_paths, orientations_per_model, shuffle)
  logging.info('Loading validation data...')
  X_val, Y_val, orientation_val = read_image_data(
      screenshots_dir, val_paths, orientations_per_model, shuffle)
  logging.info('Loading test data...')
  X_test, Y_test, orientation_test = read_image_data(
      screenshots_dir, test_paths, orientations_per_model, shuffle)
  logging.info('Finished loading data.')
  return (X_train, Y_train, orientation_train,
          X_val, Y_val, orientation_val,
          X_test, Y_test, orientation_test)


def main():
  load_ShapeNet_screenshot_data(FLAGS.screenshots_dir, FLAGS.data_split_dir)


if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.register(
      'type', 'bool', lambda v: v.lower() in ('true', 't', 'y', 'yes'))
  parser.add_argument(
      '--screenshots_dir', type=str, default=None, required=True,
      help='Path to the screenshots directory containing data images.')
  parser.add_argument(
      '--data_split_dir', type=str, default=None, required=True,
      help='Path to directory that contains test_data.txt, '
           'val_data.txt and train_data.txt files.')

  FLAGS, _ = parser.parse_known_args()
  logging.basicConfig(level=logging.DEBUG)
  main()
